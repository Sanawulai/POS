package com.example.pos.mapper;

import com.example.pos.model.Store;
import com.example.pos.payload.dto.StoreDto;

// Mapper = Translator
// Converts between Model (database object) and DTO (API object)
// Think of it like translating between two languages
public class StoreMapper {

    // ============================================
    // CONVERT STORE → STOREDTO
    // ============================================
    // Used when SENDING data to frontend
    // Example: Database Store object → JSON for frontend
    public static StoreDto toDto(Store store) {

        // If store is null, return null (safety check)
        if (store == null) {
            return null;
        }

        // Create new DTO object
        StoreDto dto = new StoreDto();

        // Copy all fields from Store to StoreDto
        dto.setId(store.getId());
        dto.setBrand(store.getBrand());
        dto.setDescription(store.getDescription());
        dto.setStoreType(store.getStoreType());
        dto.setStatus(store.getStatus());
        dto.setContact(store.getContact());
        dto.setCreatedAt(store.getCreatedAt());
        dto.setUpdatedAt(store.getUpdatedAt());

        // If store has an admin, set the admin's ID and name
        // We don't send the entire User object (too much data!)
        if (store.getStoreAdmin() != null) {
            dto.setStoreAdminId(store.getStoreAdmin().getId());
            dto.setStoreAdminName(store.getStoreAdmin().getFullname());
        }

        return dto;
    }

    // ============================================
    // CONVERT STOREDTO → STORE
    // ============================================
    // Used when RECEIVING data from frontend
    // Example: JSON from frontend → Database Store object
    public static Store toEntity(StoreDto dto) {

        // If dto is null, return null (safety check)
        if (dto == null) {
            return null;
        }

        // Create new Store object
        Store store = new Store();

        // Copy fields from DTO to Store
        // Note: We don't set ID here (it's auto-generated by database)
        // Note: We don't set storeAdmin here (it's set separately in the service)
        store.setBrand(dto.getBrand());
        store.setDescription(dto.getDescription());
        store.setStoreType(dto.getStoreType());
        store.setStatus(dto.getStatus());
        store.setContact(dto.getContact());

        return store;
    }
}